from subprocess import call
import sysconfig
import sys
import os

build_dir = 'build'
py_build_dir = os.path.join(build_dir, 'python')
py_install_prefix = '~/Library/Python'

# Target for the python extension module. This is the shared library generated by
# distutils

py_utils_target_dir = os.path.join(py_build_dir, 'lib.'+sysconfig.get_platform()+'-')
ver = sys.version_info[:3]
py_utils_target_dir += str(ver[0]) + '.' + str(ver[1]) + '.' + str(ver[2])
py_utils_target = os.path.join(py_utils_target_dir, 'utils.so')    

# Sources
# We need to rebuild the utils module (both the python extension module and the c++ module)
srcs = ['utils.h']


def build_utils_py_extn(target, source, env):
    # Invoke distutils on setup.py to build and install
    # the utils python extension module. 
    call(['python', 'setup.py', 'build', '--build-base=' + py_build_dir])
    call(['python', 'setup.py', 'install', '--prefix=' + py_install_prefix]),
    return None

# Create a SCons builder that uses the above function to build the utils python
# extension module
env = Environment()
env.Append(CXXFLAGS = '-std=c++11')
bld = Builder(action=build_utils_py_extn)
debug = ARGUMENTS.get('debug', 0)
if int(debug):
   env.Append(CCFLAGS = '-g')
env.Append(BUILDERS = {'UtilPyBuilder': bld})
env.UtilPyBuilder(py_utils_target, srcs)


# C++ tester
env.Object(target='build/c++/main.o', source=['main.cpp'])
env.Program(target='bin/driver', source=['build/c++/main.o'])
